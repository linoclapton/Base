" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=unable		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

colorscheme molokai
syntax enable
set nu!
set nocompatible
function! FileType()
    let l:filename = tolower(expand("%:t"))
    let l:index = strridx(filename,".")+1
    let l:type = strpart(filename,index)
    return type
endfunction

function! NewFile()
    let l:type = FileType()
    if l:type == 'c' || l:type == 'cpp' || l:type == 'java' || l:type=='h' || l:type=='js' || l:type=='css'
	call append(0,"/***************************************/")
	call append(1,"/*       @author   : Li Yan            */")
	call append(2,"/*       @version  : 1                 */")
	call append(3,"/*       @created  : ".strftime("%Y-%m-%d %H:%M")."  */")
	call append(4,"/*       @modified : ".strftime("%Y-%m-%d %H:%M")."  */")
	call append(5,"/***************************************/")
    elseif l:type == 'php'
	call append(0,"<?php/***************************************/")
	call append(1,"     /*       @author   : Li Yan            */")
	call append(2,"     /*       @version  : 1                 */")
	call append(3,"     /*       @created  : ".strftime("%Y-%m-%d %H:%M")."  */")
	call append(4,"     /*       @modified : ".strftime("%Y-%m-%d %H:%M")."  */")
	call append(5,"     /***************************************/?>")
    elseif l:type == 'html'|| l:type=='md'
	call append(0,"<!--***************************************")
	call append(1,"    *       @author   : Li Yan            *")
	call append(2,"    *       @version  : 1                 *")
	call append(3,"    *       @created  : ".strftime("%Y-%m-%d %H:%M")."  *")
	call append(4,"    *       @modified : ".strftime("%Y-%m-%d %H:%M")."  *")
	call append(5,"    ***************************************-->")
    elseif l:type == 'py'
	call append(0,"#######################################")
	call append(1,"#       @author   : Li Yan            #")
	call append(2,"#       @version  : 1                 #")
	call append(3,"#       @created  : ".strftime("%Y-%m-%d %H:%M")."  #")
	call append(4,"#       @modified : ".strftime("%Y-%m-%d %H:%M")."  #")
	call append(5,"#######################################")
    elseif l:type == 'tex'
	call append(0,"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
	call append(1,"%       @author   : Li Yan            %")
	call append(2,"%       @version  : 1                 %")
	call append(3,"%       @created  : ".strftime("%Y-%m-%d %H:%M")."  %")
	call append(4,"%       @modified : ".strftime("%Y-%m-%d %H:%M")."  %")
	call append(5,"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
    else
    endif
endfunction
function! OpenPHP()
    let l:path = substitute(substitute(expand('%:p'),"\\","/","g"),".*www","","")
    exec '!start chrome 127.0.0.1'.l:path
endfunction
function! SetMakeprg(type)
    if a:type == 'c'
        setlocal makeprg=gcc\ %\ -o\ %:r
    elseif a:type == 'opengl'
        setlocal makeprg=C:\\SDK\\MinGW\\bin\\gcc\ %\ -o\ %:r\ -D_STDCALL_SUPPORTED\ -D_M_IX86\ -lopengl32\ -lglut32\ -lglew32\ -lstdc++
    endif
endfunction
function! OpenMD()
    let l:path = substitute(expand('%:p'),"\\.md",".html","")
    exec 'sil !start chrome '.l:path
endfunction
"nnoremap  a<esc>l
function! MakeMap()
    let l:type = FileType()
    if l:type == 'c'
	    nnoremap <buffer> <leader>m :w<cr>:call SetMakeprg('c')<cr>:make<cr>:cw<cr>:!./%:r<cr>
        nnoremap <buffer> <leader>o :w<cr>:call SetMakeprg('opengl')<cr>:make<cr>:cw<cr>:!%:r<cr>
	    inoremap <buffer> { {}<left>
    elseif l:type == 'java'
        setlocal makeprg=javac\ %
	    nnoremap <buffer> <leader>m :w<cr>:make<cr>:cw<cr>:!java %:r<cr>
	    inoremap <buffer> { {}<left>
    elseif l:type == 'cpp'
        setlocal makeprg=g++-4.7\ %\ -o\ %:r
	    nnoremap <buffer> <leader>m :w<cr>:make<cr>:cw<cr>:!./%:r<cr>
        nnoremap <buffer> <leader>o :w<cr>:call SetMakeprg('opengl')<cr>:make<cr>:cw<cr>:!%:r<cr>
	    inoremap <buffer> { {}<esc>O
    elseif l:type == 'html'
        iabbrev  <buffer> &l &lt;
        iabbrev  <buffer> &r &gt;
        nnoremap <buffer> <leader>m :w<cr>:!start chrome %:p<cr>
    elseif l:type == 'py'
        nnoremap <buffer> <leader>m :w<cr>:!python %<cr> 
    elseif l:type == 'php'
        iabbrev  <buffer> &l &lt;
        iabbrev  <buffer> &r &gt;
        nnoremap <buffer> <leader>m :w<cr>:call OpenPHP()<cr>
    elseif l:type == 'js'
        nnoremap <buffer> <leader>m :w<cr>:!node %<cr>
    elseif l:type == 'tex'
        nnoremap <buffer> <leader>m :w<cr>:!xelatex %<cr>:!%:t:r.pdf
        ":w<cr>:!latex %:t:r.tex<cr>:!dvips %:t:r.dvi<cr>:!ps2pdf %:t:r.ps<cr>:!%:t:r.pdf
    elseif l:type == 'md'
        "nnoremap <buffer> <leader>m :w<cr>:sil !pandoc % -s -o %:t:r.html --highlight-style Monokai -c \%MYNOTE\%/css/style.css --mathjax=\%MYNOTE\%/js/MathJax.js?config=TeX-AMS-MML_HTMLorMML<cr>:call OpenMD()<cr>
        nnoremap <buffer> <leader>m :w<cr>:sil !pandoc % --from markdown+grid_tables+pipe_tables -s -o %:t:r.html --highlight-style zenburn -c \%MYNOTE\%/css/style.css --mathjax=\%MYNOTE\%/js/MathJax.js?config=TeX-AMS-MML_HTMLorMML<cr>:call OpenMD()<cr>
    else
    endif
endfunction
set encoding=utf-8
set fileencoding=utf-8
"language messages zh_CN.utf-8
nnoremap ws :call ToggleShowWhitespace()<CR>
highlight ExtraWhitespace ctermbg=darkgreen guibg=#3A3A3A
"set guicursor=n-c-v:block-Cursor-blinkon0,i-ci:ver25-lCursor-blinkon0
set mouse=""
"set shiftwidth=4
set tabstop=4
set expandtab
set ruler
set wrap
autocmd BufNewFile * :call NewFile()
autocmd BufReadPost,BufNewFile * :call MakeMap()
autocmd BufWrite   *.c,*.cpp,*.java,*.py,*.html,*.js,*.h,*.css,*.php,*.md :normal :%g/@modified/s/\d\d\d\d-\d\d-\d\d \d\d:\d\d/\=strftime("%Y-%m-%d %H:%M")/``:%g;@version;s;\zs\d[0-9 ]\{7,7}\ze;\=printf("%-8d",submatch(0)+1);``:noh
set makeprg=gcc\ %:p\ -o\ %:p:r
if has("autocmd")
    au InsertEnter *
    \ if v:insertmode == 'i' |
    \   silent execute "!gnome-terminal-cursor-shape.sh ibeam" |
    \ elseif v:insertmode == 'r' |
    \   silent execute "!gnome-terminal-cursor-shape.sh underline" |
    \ endif
au InsertLeave * silent execute "!gnome-terminal-cursor-shape.sh block"
    au VimLeave * silent execute "!gnome-terminal-cursor-shape.sh block"
endif
